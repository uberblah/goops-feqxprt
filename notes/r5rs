Too many ellipsis:
R5RS states that "pattern variables that occur in subpatterns followed by one or
more instances of the identifier '...' are allowed only in subtemplates that are
followed by as many instances of '...'". Guile 2.0.11 does not implement this
correctly and produces an error from map in the code below. The same code in
Racket 5.3.6 correctly identifies the error as "incompatible ellipsis", but does
so only when the macro is run, and so can become a runtime error in the REPL.
This error behavior is the same as the ideal behavior if the macro is used in a
source file since the macro will run once before any REPL can come up (which is
relatively common).

I intend to be stricter if I finish implementing R5RS with f-expressions, and
will consider this behavior to be prematurely allowing an incorrect use of a
syntactical form. In enforcing this, I will have an appropriate error message
regardless of whether or not the macro is actually used.

The erroneous code triggering this behavior follows:
  (define-syntax erroneous
    (syntax-rules ()
      ((erroneous beg (var val ...) ...)
       (list (list beg (list var val) ...) ...))))
  (erroneous 0 (1 2 3) (4 5 6) (7 8 9))

As for the source of the error in Guile, it is probably either a lazy Guile
implementer not putting an error message for an esoteric use of syntax-rules or
it could be the result of implementing a superset of the correct behavior.
Thankfully, this really isn't a big deal for myself using Guile, but it does
demonstrate somepotential pitfalls in implementing the standard completely,
correctly and in my case strictly.

-djf